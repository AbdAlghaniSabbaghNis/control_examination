import 'dart:async';

import 'package:awesome_dialog/awesome_dialog.dart';
import 'package:get/get.dart';
import 'package:uuid/uuid.dart';

import '../../configurations/app_links.dart';
import '../../models/uuid/uuid_res_model.dart';
import '../../resource_manager/ReusableWidget/show_dialgue.dart';
import '../../resource_manager/enums/req_type_enum.dart';
import '../../tools/response_handler.dart';
import '../controllers.dart';

/// A controller that is used to handle the student exam functionality in the app.
///
/// This class extends [GetxController] and is used to handle the student exam functionality in the app.
/// It contains a [Completer] that is used to store the uuid of the student exam.
/// The uuid is generated by the [Uuid] class.
/// The [createUuid] method is used to generate the uuid and the [uuidResModel] is used to store the result of the [createUuid] method.
/// The [onInit] method is overridden and is used to call the [createUuid] method when the controller is initialized.
/// The [update] method is called after the uuid is generated and the [uuidResModel] is completed.
class StudentExamController extends GetxController {
  /// A cached version of the [ExamMissionController] controller.
  final cachedExamMission = Get.find<ExamMissionController>().cachedExamMission;

  /// A cached version of the [ProfileController] controller.
  final userProfile = Get.find<ProfileController>().cachedUserProfile;

  /// An instance of the [Uuid] class that is used to generate the uuid.
  final uuid = const Uuid();

  /// A completer that is used to store the uuid of the student exam.
  Completer<UuidResModel> uuidResModel = Completer<UuidResModel>();

  /// This method is used to generate the uuid and the [uuidResModel] is used to store the result of the [createUuid] method.
  ///
  /// The uuid is generated using the [Uuid] class and is stored in the [uuidResModel] as a [Completer].
  ///
  /// The [createUuid] method makes a POST request to the server with the uuid as a parameter.
  ///
  /// The response is then handled by the [ResponseHandler] and the result of the [createUuid] method is stored in the [uuidResModel] as a [Completer].
  ///
  /// If the response is an error, an error dialogue is shown to the user.
  Future<void> createUuid() async {
    final responseHandler = ResponseHandler<UuidResModel>();

    var response = await responseHandler.getResponse(
      /// The path of the request.
      path: StudentsLinks.studentUuid,

      /// The converter that is used to convert the response from the server to a [UuidResModel].
      converter: UuidResModel.fromJson,

      /// The body of the request.
      body: {
        "UUID": uuid.v1(),
        "ExamMissionId": cachedExamMission?.iD,
      },

      /// The type of the request.
      type: ReqTypeEnum.POST,
    );

    response.fold(
      /// If the response is an error, an error dialogue is shown to the user.
      (l) {
        MyAwesomeDialogue(
          title: 'Error',
          desc: l.message,
          dialogType: DialogType.error,
        ).showDialogue(Get.key.currentContext!);
      },

      /// If the response is a success, the result of the [createUuid] method is stored in the [uuidResModel] as a [Completer].
      (r) {
        uuidResModel.complete(r);
      },
    );
    update();
    return;
  }

  /// A method that is overridden and is used to call the [createUuid] method when the controller is initialized.
  ///
  /// This method is used to call the [createUuid] method when the controller is initialized.
  ///
  /// The [createUuid] method makes a POST request to the server with the uuid as a parameter.
  ///
  /// The response is then handled by the [ResponseHandler] and the result of the [createUuid] method is stored in the [uuidResModel] as a [Completer].
  ///
  /// If the response is an error, an error dialogue is shown to the user.
  @override
  void onInit() async {
    super.onInit();

    /// Wait for the [createUuid] method to complete.
    await Future.wait(
      [
        createUuid(),
      ],
    );
  }
}
